var visualModellerEnergy=function(t){"use strict";class e{constructor(t){this.nodes=t.nodes||[],this.links=t.links||[],this.logs=t.logs||[],this.maxNodeId=0,this.maxLinkId=0,this.maxLogId=0}getNodeId(){let t=`node-${this.maxNodeId}`;return this.maxNodeId++,t}getLinkId(){let t=`link-${this.maxLinkId}`;return this.maxLinkId++,t}getLogId(){let t=`log-${this.maxLogId}`;return this.maxLogId++,t}addNode(t){t.id=this.getNodeId(),this.nodes.push(t)}addLink(t){t.id=this.getLinkId();const e=t.socket1;e.link=t,e.otherSocket=t.socket2;const s=t.socket2;s.link=t,s.otherSocket=t.socket1,this.links.push(t)}addLog(t){t.id=this.getLogId(),this.logs.push(t)}removeNode(t){this.nodes=this.nodes.filter((e=>e!==t))}removeLink(t){this.links=this.links.filter((e=>e!==t))}removeLog(t){this.logs=this.logs.filter((e=>e!==t))}removeNodeById(t){this.nodes=this.nodes.filter((e=>e.id!==t))}removeLinkById(t){this.links=this.links.filter((e=>e.id!==t))}removeLogById(t){this.logs=this.logs.filter((e=>e.id!==t))}clearLogs(){this.logs.forEach((t=>t.clear()))}getLinkBySocket(t){return this.links.find((e=>e.socket1===t||e.socket2===t))}getNodeBySocket(t){return this.nodes.find((e=>e.sockets.includes(t)))}}class s{constructor(t){this.name=t.name||"node",this.sockets=[],this.state=t.state||{},this.maxSocketId=0,t.sockets&&t.sockets.forEach((t=>{this.addSocket(t)}))}getSocketId(){let t=`socket-${this.maxSocketId}`;return this.maxSocketId++,t}get leftSockets(){return this.sockets.filter((t=>"left"===t.position))}get rightSockets(){return this.sockets.filter((t=>"right"===t.position))}get topSockets(){return this.sockets.filter((t=>"top"===t.position))}get bottomSockets(){return this.sockets.filter((t=>"bottom"===t.position))}addSocket(t){t.id=this.getSocketId(),this.sockets.push(t)}setSocketByIndex(t,e){e.id=this.getSocketId(),this.sockets[t]=e}getSocketByIndex(t){return this.sockets[t]}getSocketByName(t){return this.sockets.find((e=>e.name===t))}removeSocket(t){this.sockets=this.sockets.filter((e=>e!==t))}removeSocketById(t){this.sockets=this.sockets.filter((e=>e.id!==t))}removeSocketByIndex(t){this.sockets=this.sockets.filter(((e,s)=>s!==t))}}class o{constructor(t){this.name=t.name||"socket",this.state=t.state||{},this.position=t.position||"left"}}class a{constructor(t){this.socket1=t.socket1||null,this.socket2=t.socket2||null,this.state=t.state||{}}getOtherSocket(t){return t===this.socket1?this.socket2:t===this.socket2?this.socket1:null}}class i extends s{constructor(t){super(t)}setConstraints(){}updateState(){}}return t.ControllerNode=class extends i{constructor(t){super(t),this.class="controlNode",this.type="controller",this.inputSocketOrder=t.inputSocketOrder||[],this.outputSocketOrder=t.outputSocketOrder||[]}setFluxTargets(){const t=this.inputSocketOrder.map((t=>this.getSocketByName(t))),e=this.outputSocketOrder.map((t=>this.getSocketByName(t))),s=t.map((t=>t.otherSocket)),o=e.map((t=>t.otherSocket));let a=s.filter((t=>"constraint"==t.state.valueType)).reduce(((t,e)=>t+e.state.value),0),i=o.filter((t=>"constraint"==t.state.valueType)).reduce(((t,e)=>t+e.state.value),0);a>=i?(o.forEach((t=>{if("constraint"==t.state.valueType){const e=t.otherSocket;e.state.value=null,e.state.valueType="variable",e.state.max=1/0,a-=t.state.value}})),o.forEach((t=>{if("variable"==t.state.valueType){const e=t.otherSocket,s=Math.min(a,t.state.max);e.state.value=s,e.state.valueType="target",a-=s}})),s.forEach((t=>{if("constraint"==t.state.valueType){const e=t.otherSocket;e.state.value=null,e.state.valueType="variable",e.state.max=1/0}if("variable"==t.state.valueType){const e=t.otherSocket;e.state.value=0,e.state.valueType="target"}}))):(s.forEach((t=>{if("constraint"==t.state.valueType){const e=t.otherSocket;e.state.value=null,e.state.valueType="variable",e.state.max=1/0,i-=t.state.value}})),s.forEach((t=>{if("variable"==t.state.valueType){const e=t.otherSocket,s=Math.min(i,t.state.max);e.state.value=s,e.state.valueType="target",i-=s}})),o.forEach((t=>{if("constraint"==t.state.valueType){const e=t.otherSocket;e.state.value=null,e.state.valueType="variable",e.state.max=1/0}if("variable"==t.state.valueType){const e=t.otherSocket;e.state.value=0,e.state.valueType="target"}})))}},t.GridExportNode=class extends i{constructor(t){super(t),this.class="endNode",this.type="gridExport";const e={};e.name=t.socketName||"Grid Export",e.position=t.position||"left",e.state=t.socketState||{max:1/0,value:null,valueType:"variable"},this.setSocketByIndex(0,new o(e))}},t.GridSupplyNode=class extends i{constructor(t){super(t),this.class="endNode",this.type="gridSupply";const e={};e.name=t.socketName||"Grid Supply",e.position=t.position||"right",e.state=t.socketState||{max:1/0,value:null,valueType:"variable"},this.setSocketByIndex(0,new o(e))}},t.Link=class extends a{constructor(t){super(t)}setFlux(){const t=this.socket1.state,e=this.socket2.state;t.valueType==e.valueType&&console.log("warning - both sockets for this link have the same valueType",this),"variable"!=e.valueType||"constraint"!=t.valueType&&"target"!=t.valueType||(t.value<=e.max?this.state.value=t.value:console.log("problem - variable value exceeds constraint max",this)),"variable"!=t.valueType||"constraint"!=e.valueType&&"target"!=e.valueType||(e.value<=t.max?this.state.value=e.value:console.log("problem - variable value exceeds constraint max",this))}},t.LoadNode=class extends i{constructor(t){super(t),this.class="endNode",this.type="loadNode";const e={};e.name=t.socketName||"Load",e.position=t.position||"left",e.state=t.socketState||{max:null,value:null,valueType:"constraint",timeVarying:!1,timeSeries:null},this.setSocketByIndex(0,new o(e))}setConstraints(t){const e=t.timeStep,s=this.getSocketByIndex(0).state;"constraint"===s.valueType&&s.timeVarying&&(s.value=s.timeSeries[e])}},t.Log=class{constructor(t){this.name=t.name||"log",this.target=t.target||null,this.states=[]}writeToLog(){this.states.push({...this.target.state})}clear(){this.states=[]}},t.Model=class extends e{constructor(t){super(t),this.timeVarying=t.timeVarying||!1,this.timeSteps=t.timeSteps||1,this.timeStep=0}run(){const t=this.nodes,e=this.links,s=this.logs,o=this.timeVarying,a=this.timeSteps;o||(this.timeSteps=1);for(let o=0;o<a;o++)this.timeStep=o,t.forEach((t=>t.setConstraints({timeStep:o}))),t.filter((t=>"controller"===t.type)).forEach((t=>t.setFluxTargets())),e.forEach((t=>t.setFlux())),t.forEach((t=>t.updateState())),s.forEach((t=>t.writeToLog()))}},t.Socket=o,t.SolarPVNode=class extends i{constructor(t){super(t),this.class="endNode",this.type="solarPVNode";const e={};e.name=t.socketName||"Solar PV",e.position=t.position||"right",e.state=t.socketState||{max:null,value:null,valueType:"constraint",timeVarying:!1,timeSeries:null},this.setSocketByIndex(0,new o(e))}setConstraints(t){const e=t.timeStep,s=this.getSocketByIndex(0).state;"constraint"!==!s.valueType&&s.timeVarying&&(s.value=s.timeSeries[e])}},t}({});
//# sourceMappingURL=visual-modeller-energy.min.js.map
