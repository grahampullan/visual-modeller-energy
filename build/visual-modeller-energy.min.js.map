{"version":3,"file":"visual-modeller-energy.min.js","sources":["../node_modules/visual-modeller-core/build/visual-modeller-core.js","../src/EnergyNode.js","../src/GridExportNode.js","../src/GridSupplyNode.js","../src/LoadNode.js","../src/SolarPVNode.js","../src/ControllerNode.js","../src/BatteryStorageNode.js","../src/EnergyLink.js","../src/EnergyModel.js"],"sourcesContent":["class Socket {\n    constructor(options) {\n        this.name = options.name || 'socket';\n        this.state = options.state || {};\n        this.position = options.position || 'left';  \n    }\n}\n\nclass Log {\n    constructor(options) {\n        this.name = options.name || 'log';\n        this.target = options.target || null;\n        this.states = [];\n    }\n\n    writeToLog() {\n        this.states.push({...this.target.state});\n    }\n\n    clear() {\n        this.states = [];\n    }\n}\n\nclass Model {\n    constructor(options) {\n        options = options || {};\n        this.nodes = options.nodes || [];\n        this.links = options.links || [];\n        this.logs = options.logs || [];\n        this.maxNodeId = 0;\n        this.maxLinkId = 0;\n        this.maxLogId = 0;\n    }\n\n    getNodeId() {\n        let newNodeId = `node-${this.maxNodeId}`;\n        this.maxNodeId++;\n        return newNodeId;\n    }\n\n    getLinkId() {\n        let newLinkId = `link-${this.maxLinkId}`;\n        this.maxLinkId++;\n        return newLinkId;\n    }\n\n    getLogId() {\n        let newLogId = `log-${this.maxLogId}`;\n        this.maxLogId++;\n        return newLogId;\n    }\n\n    addNode(node) {\n        node.id = this.getNodeId();\n        this.nodes.push(node);\n    }\n\n    addLink(link) {\n        link.id = this.getLinkId();\n        const s1 = link.socket1;\n        s1.link = link;\n        s1.otherSocket = link.socket2;\n        const s2 = link.socket2;\n        s2.link = link;\n        s2.otherSocket = link.socket1;\n        this.links.push(link);\n    }\n\n    addLog(log) {\n        log.id = this.getLogId();\n        this.logs.push(log);\n    }\n\n    removeNode(node) {\n        this.nodes = this.nodes.filter(n => n !== node);\n    }\n\n    removeLink(link) {\n        this.links = this.links.filter(l => l !== link);\n    }\n\n    removeLog(log) {\n        this.logs = this.logs.filter(l => l !== log);\n    }\n\n    removeNodeById(id) {\n        this.nodes = this.nodes.filter(n => n.id !== id);\n    }\n\n    removeLinkById(id) {\n        this.links = this.links.filter(l => l.id !== id);\n    }\n\n    removeLogById(id) {\n        this.logs = this.logs.filter(l => l.id !== id);\n    }\n\n    clearLogs() {\n        this.logs.forEach(l => l.clear());\n    }\n\n    getLinkBySocket(socket) {\n        return this.links.find(l => l.socket1 === socket || l.socket2 === socket);\n    }\n\n    getNodeBySocket(socket) {\n        return this.nodes.find(n => n.sockets.includes(socket));\n    }\n\n    getNodeByName(name) {\n        return this.nodes.find(n => n.name === name);\n    }\n\n    getLinkByName(name) {\n        return this.links.find(l => l.name === name);\n    }\n\n    getNodeClassByClassName(className) {\n        if (!this.availableNodeClasses) {\n            return null;\n        }\n        const availableNodeClassNames = this.availableNodeClasses.map(c => {\n            const instance = new c();\n            return instance.className;\n        });\n        const index = availableNodeClassNames.indexOf(className);\n        if (index === -1) {\n            return null;\n        } else {\n            return this.availableNodeClasses[index];\n        }   \n    }\n\n    getLinkClassByClassName(className) {\n        if (!this.availableLinkClasses) {\n            return null;\n        }\n        if (this.availableLinkClasses.length === 1) {\n            return this.availableLinkClasses[0];\n        }\n        const availableLinkClassNames = this.availableLinkClasses.map(c => {\n            const instance = new c();\n            return instance.className;\n        });\n        const index = availableLinkClassNames.indexOf(className);\n        if (index === -1) {\n            return null;\n        } else {\n            return this.availableLinkClasses[index];\n        }   \n    }\n\n    get allSockets() {\n        return this.nodes.map(n => n.sockets).flat();\n    }\n\n    getSocketByName(socketName) {\n        console.log(this.allSockets.map(s => s.name));\n        console.log(socketName);\n        return this.allSockets.find(s => s.name == socketName);\n    }\n\n    toJson() {\n        const modelForJson = {};\n        modelForJson.config = this.config;\n        modelForJson.nodes = this.nodes.map(n => {\n            const nJson = {};\n            nJson.name = n.name;\n            nJson.className = n.className;\n            nJson.state = n.state;\n            nJson.sockets = n.sockets.map(s => {\n                const sJson = {};\n                sJson.name = s.name;\n                sJson.position = s.position;\n                sJson.state = s.state;\n                return sJson;\n            });\n            return nJson;\n        });\n        modelForJson.links = this.links.map(l => {\n            const lJson = {};\n            lJson.name = l.name;\n            lJson.socket1Name = l.socket1.name;\n            lJson.socket2Name = l.socket2.name;\n            return lJson;\n        });\n        modelForJson.logs = this.logs.map(l => {\n            const lJson = {};\n            lJson.name = l.name;\n            lJson.targetName = l.target.name;\n            return lJson;\n        });\n        return JSON.stringify(modelForJson);\n    }\n\n    saveToFile() {\n        const modelJson = this.toJson();\n        const blob = new Blob([modelJson], {type: 'application/json'});\n        const url = URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = 'model.json';\n        a.click();\n    }\n\n    fromJsonObject(jsonModel) {\n        console.log(jsonModel);\n        this.config = jsonModel.config;\n        jsonModel.nodes.forEach(n => {\n            const NodeClass = this.getNodeClassByClassName(n.className);\n            const node = new NodeClass(n);\n            node.sockets = n.sockets.map(s => new Socket(s));\n            console.log(node);\n            this.addNode(node);\n        });\n        console.log(\"nodes added\");\n        jsonModel.links.forEach(l => {\n            console.log(l);\n            const socket1 = this.getSocketByName(l.socket1Name);\n            const socket2 = this.getSocketByName(l.socket2Name);\n            console.log(socket1, socket2);\n            let LinkClass;\n            if (!l.className) {\n                LinkClass = this.getLinkClassByClassName();\n            } else {\n                LinkClass = this.getLinkClassByClassName(l.className);\n            }\n            console.log(LinkClass);\n            console.log(this.availableLinkClasses);\n            this.addLink(new LinkClass({name:l.name, socket1, socket2}));\n            console.log(\"link added\");\n        });\n        console.log(\"links added\");\n        jsonModel.logs.forEach(l => {\n            console.log(l);\n            const targetNode = this.getNodeByName(l.targetName);\n            const targetLink = this.getLinkByName(l.targetName);\n            console.log(targetNode, targetLink);\n            const target = targetNode || targetLink;\n            console.log(target);\n            this.addLog(new Log({name:l.name, target}));\n        });\n        console.log(\"logs added\");\n\n\n\n    }\n\n    async loadFromUrl(url) {\n        const response = await fetch(url);\n        const json = await response.json();\n        this.fromJsonObject(json);\n    }\n\n\n\n\n}\n\nclass Node {\n    constructor(options) {\n        this.name = options.name || 'node';\n        this.sockets = [];\n        this.state = options.state || {};\n        this.maxSocketId = 0;\n        if (options.sockets) {\n            options.sockets.forEach(socket => {\n                this.addSocket(socket);\n            });\n        }\n    }\n\n    getSocketId() {\n        let newSocketId = `socket-${this.maxSocketId}`;\n        this.maxSocketId++;\n        return newSocketId;\n    }\n\n    get leftSockets() {\n        return this.sockets.filter(s => s.position === 'left');\n    }\n\n    get rightSockets() {\n        return this.sockets.filter(s => s.position === 'right');\n    }\n\n    get topSockets() {\n        return this.sockets.filter(s => s.position === 'top');\n    }\n\n    get bottomSockets() {\n        return this.sockets.filter(s => s.position === 'bottom');\n    }\n    \n    addSocket(socket) {\n        socket.id = this.getSocketId();\n        this.sockets.push(socket);\n    }\n\n    setSocketByIndex(index, socket) {\n        socket.id = this.getSocketId();\n        this.sockets[index] = socket;\n    }\n\n    getSocketByIndex(index) {\n        return this.sockets[index];\n    }\n    \n    getSocketByName(name) {\n        return this.sockets.find(s => s.name === name);\n    }\n\n    removeSocket(socket) {\n        this.sockets = this.sockets.filter(s => s !== socket);\n    }\n\n    removeSocketById(id) {\n        this.sockets = this.sockets.filter(s => s.id !== id);\n    }\n\n    removeSocketByIndex(index) {\n        this.sockets = this.sockets.filter((s, i) => i !== index);\n    }\n\n}\n\nclass Link {\n    constructor(options) {\n        options = options || {};\n        this.name = options.name || \"link\";\n        this.socket1 = options.socket1 || null;\n        this.socket2 = options.socket2 || null;\n        this.state = options.state || {};\n    }\n\n    getOtherSocket(socket) {\n        if (socket === this.socket1) {\n            return this.socket2;\n        } else if (socket === this.socket2) {\n            return this.socket1;\n        } else {\n            return null;\n        }\n    }\n}\n\nexport { Link, Log, Model, Node, Socket };\n","import { Node } from 'visual-modeller-core';\n\nclass EnergyNode extends Node {\n    constructor(options) {\n        options = options || {};\n        super(options);\n    }\n\n    setConstraints(){\n        return;\n    }\n    \n    updateState(){\n        return;\n    }\n}\n\n\nexport { EnergyNode };","import { EnergyNode } from \"./EnergyNode\";\nimport { Socket } from 'visual-modeller-core';\n\nclass GridExportNode extends EnergyNode {\n    constructor(options) {\n        options = options || {};\n        super(options);\n        this.className = 'gridExportNode';\n        this.type = 'endNode';\n        const socketOptions = {};\n        socketOptions.name = options.socketName || 'Grid Export';\n        socketOptions.position = options.position || 'left';\n        socketOptions.state = options.socketState || {max: Infinity, value:null, valueType: \"variable\"};\n        this.setSocketByIndex(0, new Socket(socketOptions));\n    }\n}\n\nexport { GridExportNode };","import { EnergyNode } from \"./EnergyNode\";\nimport { Socket } from 'visual-modeller-core';\n\nclass GridSupplyNode extends EnergyNode {\n    constructor(options) {\n        options = options || {};\n        super(options);\n        this.className = 'gridSupplyNode';\n        this.type = 'endNode';\n        const socketOptions = {};\n        socketOptions.name = options.socketName || 'Grid Supply';\n        socketOptions.position = options.position || 'right'; // output on right side\n        socketOptions.state = options.socketState || {max: Infinity, value:null, valueType: \"variable\"};\n        this.setSocketByIndex(0, new Socket(socketOptions)); // endNode so only one socket\n    }\n}\n\nexport { GridSupplyNode };","import { EnergyNode } from \"./EnergyNode\";\nimport { Socket } from 'visual-modeller-core';\n\nclass LoadNode extends EnergyNode {\n    constructor(options) {\n        options = options || {};\n        super(options);\n        this.className = 'loadNode';\n        this.type = 'endNode';\n        const socketOptions = {};\n        socketOptions.name = options.socketName || 'Load';\n        socketOptions.position = options.position || 'left'; // input on left side\n        socketOptions.state = options.socketState || {max: null, value:null, valueType: \"constraint\", timeVarying: false, timeSeries: null};\n        this.setSocketByIndex(0, new Socket(socketOptions)); // endNode so only one socket\n    }\n\n    setConstraints() {\n        const state = this.getSocketByIndex(0).state;\n        if (state.valueType !== \"constraint\") {\n            return;\n        }\n        if (state.timeVarying) {\n            state.value = state.timeSeries[this.timeStep];\n        } \n    }\n\n}\n\nexport { LoadNode };","import { EnergyNode } from \"./EnergyNode\";\nimport { Socket } from 'visual-modeller-core';\n\nclass SolarPVNode extends EnergyNode {\n    constructor(options) {\n        options = options || {};\n        super(options);\n        this.className = 'solarPVNode';\n        this.type = 'endNode';\n        const socketOptions = {};\n        socketOptions.name = options.socketName || 'Solar PV';\n        socketOptions.position = options.position || 'right'; // output on right side\n        socketOptions.state = options.socketState || {max: null, value:null, valueType: \"constraint\", timeVarying: false, timeSeries: null};\n        this.setSocketByIndex(0, new Socket(socketOptions)); // endNode so only one socket\n    }\n\n    setConstraints() {\n        const state = this.getSocketByIndex(0).state;\n        if (!state.valueType === \"constraint\") {\n            return;\n        }\n        if (state.timeVarying) {\n            state.value = state.timeSeries[this.timeStep];\n        } \n    }\n\n}\n\nexport { SolarPVNode };","import { EnergyNode } from \"./EnergyNode\";\n\nclass ControllerNode extends EnergyNode {\n    constructor(options) {\n        options = options || {};\n        super(options);\n        this.class = 'controllerNode';\n        this.type = 'controllerNode';\n    }\n\n    setFluxTargets(){\n        const inputSocketOrder = this.state.inputSocketOrder;\n        const outputSocketOrder = this.state.outputSocketOrder;\n        const controllerInputSockets = inputSocketOrder.map(socketName => this.getSocketByName(socketName));\n        const controllerOutputSockets = outputSocketOrder.map(socketName => this.getSocketByName(socketName));\n        const inputConnectedSockets = controllerInputSockets.map( s => s.otherSocket);\n        const outputConnectedSockets = controllerOutputSockets.map( s => s.otherSocket);\n       \n        let totalInput = inputConnectedSockets.filter( s => s.state.valueType == \"constraint\").reduce((acc, s) => acc + s.state.value, 0);\n        let totalOutput = outputConnectedSockets.filter( s => s.state.valueType == \"constraint\").reduce((acc, s) => acc + s.state.value, 0);\n        \n        if (totalInput >= totalOutput){ // more supply than demand\n            outputConnectedSockets.forEach( s => {\n                if (s.state.valueType == \"constraint\"){\n                    const controllerSocket = s.otherSocket;\n                    controllerSocket.state.value = null;\n                    controllerSocket.state.valueType = \"variable\";\n                    controllerSocket.state.max = Infinity;\n                    totalInput -= s.state.value;\n                }\n            });\n            outputConnectedSockets.forEach( s => {\n                if (s.state.valueType == \"variable\"){\n                    const controllerSocket = s.otherSocket;\n                    const targetValue = Math.min(totalInput, s.state.max);\n                    controllerSocket.state.value = targetValue;\n                    controllerSocket.state.valueType = \"target\";\n                    totalInput -= targetValue;\n                }\n            });\n            inputConnectedSockets.forEach( s => {\n                if (s.state.valueType == \"constraint\"){\n                    const controllerSocket = s.otherSocket;\n                    controllerSocket.state.value = null;\n                    controllerSocket.state.valueType = \"variable\";\n                    controllerSocket.state.max = Infinity;\n                }\n                if (s.state.valueType == \"variable\"){\n                    const controllerSocket = s.otherSocket;\n                    controllerSocket.state.value = 0.;\n                    controllerSocket.state.valueType = \"target\";\n                }\n            });\n        } else { // more demand than supply\n            inputConnectedSockets.forEach( s => {\n                if (s.state.valueType == \"constraint\"){\n                    const controllerSocket = s.otherSocket;\n                    controllerSocket.state.value = null;\n                    controllerSocket.state.valueType = \"variable\";\n                    controllerSocket.state.max = Infinity;\n                    totalOutput -= s.state.value;\n                }\n            });\n            inputConnectedSockets.forEach( s => {\n                if (s.state.valueType == \"variable\"){\n                    const controllerSocket = s.otherSocket;\n                    const targetValue = Math.min(totalOutput, s.state.max);\n                    controllerSocket.state.value = targetValue;\n                    controllerSocket.state.valueType = \"target\";\n                    totalOutput -= targetValue;\n                }\n            });\n            outputConnectedSockets.forEach( s => {\n                if (s.state.valueType == \"constraint\"){\n                    const controllerSocket = s.otherSocket;\n                    controllerSocket.state.value = null;\n                    controllerSocket.state.valueType = \"variable\";\n                    controllerSocket.state.max = Infinity;\n                }\n                if (s.state.valueType == \"variable\"){\n                    const controllerSocket = s.otherSocket;\n                    controllerSocket.state.value = 0.;\n                    controllerSocket.state.valueType = \"target\";\n                }\n            });\n        }\n    }\n\n}\n\n\n\nexport { ControllerNode };","import { EnergyNode } from \"./EnergyNode\";\nimport { Socket } from 'visual-modeller-core';\n\nclass BatteryStorageNode extends EnergyNode {\n    constructor(options) {\n        options = options || {};\n        options.state = options.state || {};\n        options.state.maxCharge = options.state.maxCharge || 3000;\n        options.state.maxDischarge = options.state.maxDischarge || 3000;\n        const defaultInputSocket = new Socket({name: 'Input', position: 'left', state: {max: options.state.maxCharge, value:null, valueType: \"variable\"}});\n        const defaultOutputSocket = new Socket({name: 'Output', position: 'right', state: {max:  options.state.maxDischarge, value:null, valueType: \"variable\"}});\n        const defaultSockets = [defaultInputSocket, defaultOutputSocket];\n        options.sockets = options.sockets || defaultSockets;\n        options.state.capacity = options.state.capacity || 5;\n        super(options);\n        this.state.charge = 0;\n        this.className = 'batteryStorageNode';\n        this.type = 'storageNode';\n    }\n\n    updateState() {\n        const JinkWh = 1000*60*60;\n        const inputSockets = this.leftSockets;\n        const outputSockets = this.rightSockets;\n        const inputLinks = inputSockets.map( s => s.link );\n        const outputLinks = outputSockets.map( s => s.link );\n        const inputFluxes = inputLinks.map( l => l.state.value);\n        const outputFluxes = outputLinks.map( l => l.state.value);\n        const totalInputFlux = inputFluxes.reduce( (a,b) => a+b, 0);\n        const totalOutputFlux = outputFluxes.reduce( (a,b) => a+b, 0);\n        const netFluxIn = totalInputFlux - totalOutputFlux; // in W\n        const remainingCapacity = this.state.capacity - this.state.charge; // in kWh\n        const chargeChange = Math.min(netFluxIn*this.timeStepSize/JinkWh, remainingCapacity);\n        this.state.charge += chargeChange;\n        let maxDischarge = Math.min(this.state.maxDischarge, this.state.charge*JinkWh);\n        maxDischarge = Math.max(maxDischarge, 0);\n        const maxCharge = Math.min(this.state.maxCharge, (this.state.capacity - this.state.charge)*JinkWh);\n        this.getSocketByIndex(0).state.max = maxCharge;\n        this.getSocketByIndex(1).state.max = maxDischarge;\n    }\n\n}\n\nexport { BatteryStorageNode };","import { Link } from 'visual-modeller-core';\n\nclass EnergyLink extends Link {\n    constructor(options) {\n        super(options);\n    }\n\n    setFlux() {\n        const socket1 = this.socket1;\n        const state1 = socket1.state;\n        const socket2 = this.socket2;\n        const state2 = socket2.state;\n\n        //console.log(socket1, socket2);\n\n        if (state1.valueType == state2.valueType) {\n            console.log(\"warning - both sockets for this link have the same valueType\", this);\n        }\n\n        if (state2.valueType == \"variable\" && (state1.valueType == \"constraint\" || state1.valueType == \"target\")) {\n            if (state1.value <= state2.max) {\n                this.state.value = state1.value;\n            } else {\n                console.log(\"problem - variable value exceeds constraint max\", this);\n            }\n        }\n\n        if (state1.valueType == \"variable\" && (state2.valueType == \"constraint\" || state2.valueType == \"target\")) {\n            if (state2.value <= state1.max) {\n                this.state.value = state2.value;\n            } else {\n                console.log(\"problem - variable value exceeds constraint max\", this);\n            }\n        }\n\n    }\n\n}\n\nexport { EnergyLink };","import { Model } from 'visual-modeller-core';\nimport { BatteryStorageNode } from './BatteryStorageNode';\nimport { ControllerNode } from './ControllerNode';\nimport { GridExportNode } from './GridExportNode';\nimport { GridSupplyNode } from './GridSupplyNode';\nimport { LoadNode } from './LoadNode';\nimport { SolarPVNode } from './SolarPVNode';\nimport { EnergyLink } from './EnergyLink';\n\nclass EnergyModel extends Model {\n    constructor(options) {\n        options = options || {};\n        super(options);\n        const configOptions = options.config || {};\n        const config = {}\n        config.timeVarying = configOptions.timeVarying || false;\n        config.timeSteps = configOptions.timeSteps || 1;\n        config.timeStepSize = configOptions.timeStepSize || 1.0;\n        this.config = config;\n        this.timeStep = 0;\n    }\n\n    get availableNodeClasses() {\n        return [BatteryStorageNode, ControllerNode, GridExportNode, GridSupplyNode, LoadNode, SolarPVNode]; \n    }\n\n    get availableLinkClasses() {\n        return [EnergyLink];\n    }\n\n    setTimeStep(timeStep) {\n        this.timeStep = timeStep;\n        this.nodes.forEach( n => n.timeStep = timeStep);\n    }\n\n    setTimeStepSize(timeStepSize) {\n        this.config.timeStepSize = timeStepSize;\n        this.nodes.forEach( n => n.timeStepSize = timeStepSize);\n    }\n\n    run() {\n        const nodes = this.nodes;\n        const links = this.links;\n        const logs = this.logs;\n        const timeVarying = this.config.timeVarying;\n        const timeSteps = this.config.timeSteps;\n        const timeStepSize = this.config.timeStepSize;\n        this.setTimeStepSize(timeStepSize);\n        if (!timeVarying) {\n            this.timeSteps = 1;\n        }\n\n\n        for (let i = 0; i < timeSteps; i++) {\n            this.setTimeStep(i);\n            // solution process:\n            //     allNodes - set fixed fluxes and flux limits - e.g. constrained fluxes\n            //     socket.state.fluxTarget is set\n\n            nodes.forEach(node => node.setConstraints()); // needs to know time step\n            //console.log(\"constraints set\");\n\n            //     allControllerNodes - set flux targets on sockets\n\n            nodes.filter(node => node.type === 'controllerNode').forEach(controllerNode => controllerNode.setFluxTargets());\n            //console.log(\"flux targets set\");\n            //console.log(links);\n\n            //     allLinks - set fluxes using targets\n\n            links.forEach(link => link.setFlux());\n            //console.log(\"fluxes set\");\n\n            //     allNodes - update state given current fluxes (e.g. battery)\n\n            nodes.forEach(node => node.updateState());\n            //console.log(\"states updated\");\n\n            //    finally update logs\n            //    logs is array of objects {\"name\", [values]}\n\n            logs.forEach( log => log.writeToLog());\n            //console.log(\"logs written\");\n            \n        }\n\n    }\n}\n\nexport { EnergyModel };\n\n\n\n"],"names":["Socket","constructor","options","this","name","state","position","Log","target","states","writeToLog","push","clear","Model","nodes","links","logs","maxNodeId","maxLinkId","maxLogId","getNodeId","newNodeId","getLinkId","newLinkId","getLogId","newLogId","addNode","node","id","addLink","link","s1","socket1","otherSocket","socket2","s2","addLog","log","removeNode","filter","n","removeLink","l","removeLog","removeNodeById","removeLinkById","removeLogById","clearLogs","forEach","getLinkBySocket","socket","find","getNodeBySocket","sockets","includes","getNodeByName","getLinkByName","getNodeClassByClassName","className","availableNodeClasses","index","map","c","indexOf","getLinkClassByClassName","availableLinkClasses","length","allSockets","flat","getSocketByName","socketName","console","s","toJson","modelForJson","config","nJson","sJson","lJson","socket1Name","socket2Name","targetName","JSON","stringify","saveToFile","modelJson","blob","Blob","type","url","URL","createObjectURL","a","document","createElement","href","download","click","fromJsonObject","jsonModel","LinkClass","targetNode","targetLink","loadFromUrl","response","fetch","json","Node","maxSocketId","addSocket","getSocketId","newSocketId","leftSockets","rightSockets","topSockets","bottomSockets","setSocketByIndex","getSocketByIndex","removeSocket","removeSocketById","removeSocketByIndex","i","Link","getOtherSocket","EnergyNode","super","setConstraints","updateState","GridExportNode","socketOptions","socketState","max","Infinity","value","valueType","GridSupplyNode","LoadNode","timeVarying","timeSeries","timeStep","SolarPVNode","ControllerNode","class","setFluxTargets","inputSocketOrder","outputSocketOrder","controllerInputSockets","controllerOutputSockets","inputConnectedSockets","outputConnectedSockets","totalInput","reduce","acc","totalOutput","controllerSocket","targetValue","Math","min","BatteryStorageNode","maxCharge","maxDischarge","defaultSockets","capacity","charge","JinkWh","inputSockets","outputSockets","inputLinks","outputLinks","inputFluxes","outputFluxes","netFluxIn","b","remainingCapacity","chargeChange","timeStepSize","EnergyLink","setFlux","state1","state2","configOptions","timeSteps","setTimeStep","setTimeStepSize","run","controllerNode"],"mappings":"kDAAA,MAAMA,EACF,WAAAC,CAAYC,GACRC,KAAKC,KAAOF,EAAQE,MAAQ,SAC5BD,KAAKE,MAAQH,EAAQG,OAAS,CAAA,EAC9BF,KAAKG,SAAWJ,EAAQI,UAAY,MACvC,EAGL,MAAMC,EACF,WAAAN,CAAYC,GACRC,KAAKC,KAAOF,EAAQE,MAAQ,MAC5BD,KAAKK,OAASN,EAAQM,QAAU,KAChCL,KAAKM,OAAS,EACjB,CAED,UAAAC,GACIP,KAAKM,OAAOE,KAAK,IAAIR,KAAKK,OAAOH,OACpC,CAED,KAAAO,GACIT,KAAKM,OAAS,EACjB,EAGL,MAAMI,EACF,WAAAZ,CAAYC,GACRA,EAAUA,GAAW,GACrBC,KAAKW,MAAQZ,EAAQY,OAAS,GAC9BX,KAAKY,MAAQb,EAAQa,OAAS,GAC9BZ,KAAKa,KAAOd,EAAQc,MAAQ,GAC5Bb,KAAKc,UAAY,EACjBd,KAAKe,UAAY,EACjBf,KAAKgB,SAAW,CACnB,CAED,SAAAC,GACI,IAAIC,EAAY,QAAQlB,KAAKc,YAE7B,OADAd,KAAKc,YACEI,CACV,CAED,SAAAC,GACI,IAAIC,EAAY,QAAQpB,KAAKe,YAE7B,OADAf,KAAKe,YACEK,CACV,CAED,QAAAC,GACI,IAAIC,EAAW,OAAOtB,KAAKgB,WAE3B,OADAhB,KAAKgB,WACEM,CACV,CAED,OAAAC,CAAQC,GACJA,EAAKC,GAAKzB,KAAKiB,YACfjB,KAAKW,MAAMH,KAAKgB,EACnB,CAED,OAAAE,CAAQC,GACJA,EAAKF,GAAKzB,KAAKmB,YACf,MAAMS,EAAKD,EAAKE,QAChBD,EAAGD,KAAOA,EACVC,EAAGE,YAAcH,EAAKI,QACtB,MAAMC,EAAKL,EAAKI,QAChBC,EAAGL,KAAOA,EACVK,EAAGF,YAAcH,EAAKE,QACtB7B,KAAKY,MAAMJ,KAAKmB,EACnB,CAED,MAAAM,CAAOC,GACHA,EAAIT,GAAKzB,KAAKqB,WACdrB,KAAKa,KAAKL,KAAK0B,EAClB,CAED,UAAAC,CAAWX,GACPxB,KAAKW,MAAQX,KAAKW,MAAMyB,QAAOC,GAAKA,IAAMb,GAC7C,CAED,UAAAc,CAAWX,GACP3B,KAAKY,MAAQZ,KAAKY,MAAMwB,QAAOG,GAAKA,IAAMZ,GAC7C,CAED,SAAAa,CAAUN,GACNlC,KAAKa,KAAOb,KAAKa,KAAKuB,QAAOG,GAAKA,IAAML,GAC3C,CAED,cAAAO,CAAehB,GACXzB,KAAKW,MAAQX,KAAKW,MAAMyB,QAAOC,GAAKA,EAAEZ,KAAOA,GAChD,CAED,cAAAiB,CAAejB,GACXzB,KAAKY,MAAQZ,KAAKY,MAAMwB,QAAOG,GAAKA,EAAEd,KAAOA,GAChD,CAED,aAAAkB,CAAclB,GACVzB,KAAKa,KAAOb,KAAKa,KAAKuB,QAAOG,GAAKA,EAAEd,KAAOA,GAC9C,CAED,SAAAmB,GACI5C,KAAKa,KAAKgC,SAAQN,GAAKA,EAAE9B,SAC5B,CAED,eAAAqC,CAAgBC,GACZ,OAAO/C,KAAKY,MAAMoC,MAAKT,GAAKA,EAAEV,UAAYkB,GAAUR,EAAER,UAAYgB,GACrE,CAED,eAAAE,CAAgBF,GACZ,OAAO/C,KAAKW,MAAMqC,MAAKX,GAAKA,EAAEa,QAAQC,SAASJ,IAClD,CAED,aAAAK,CAAcnD,GACV,OAAOD,KAAKW,MAAMqC,MAAKX,GAAKA,EAAEpC,OAASA,GAC1C,CAED,aAAAoD,CAAcpD,GACV,OAAOD,KAAKY,MAAMoC,MAAKT,GAAKA,EAAEtC,OAASA,GAC1C,CAED,uBAAAqD,CAAwBC,GACpB,IAAKvD,KAAKwD,qBACN,OAAO,KAEX,MAIMC,EAJ0BzD,KAAKwD,qBAAqBE,KAAIC,IACzC,IAAIA,GACLJ,YAEkBK,QAAQL,GAC9C,OAAe,IAAXE,EACO,KAEAzD,KAAKwD,qBAAqBC,EAExC,CAED,uBAAAI,CAAwBN,GACpB,IAAKvD,KAAK8D,qBACN,OAAO,KAEX,GAAyC,IAArC9D,KAAK8D,qBAAqBC,OAC1B,OAAO/D,KAAK8D,qBAAqB,GAErC,MAIML,EAJ0BzD,KAAK8D,qBAAqBJ,KAAIC,IACzC,IAAIA,GACLJ,YAEkBK,QAAQL,GAC9C,OAAe,IAAXE,EACO,KAEAzD,KAAK8D,qBAAqBL,EAExC,CAED,cAAIO,GACA,OAAOhE,KAAKW,MAAM+C,KAAIrB,GAAKA,EAAEa,UAASe,MACzC,CAED,eAAAC,CAAgBC,GAGZ,OAFAC,QAAQlC,IAAIlC,KAAKgE,WAAWN,KAAIW,GAAKA,EAAEpE,QACvCmE,QAAQlC,IAAIiC,GACLnE,KAAKgE,WAAWhB,MAAKqB,GAAKA,EAAEpE,MAAQkE,GAC9C,CAED,MAAAG,GACI,MAAMC,EAAe,CAAA,EA6BrB,OA5BAA,EAAaC,OAASxE,KAAKwE,OAC3BD,EAAa5D,MAAQX,KAAKW,MAAM+C,KAAIrB,IAChC,MAAMoC,EAAQ,CAAA,EAWd,OAVAA,EAAMxE,KAAOoC,EAAEpC,KACfwE,EAAMlB,UAAYlB,EAAEkB,UACpBkB,EAAMvE,MAAQmC,EAAEnC,MAChBuE,EAAMvB,QAAUb,EAAEa,QAAQQ,KAAIW,IAC1B,MAAMK,EAAQ,CAAA,EAId,OAHAA,EAAMzE,KAAOoE,EAAEpE,KACfyE,EAAMvE,SAAWkE,EAAElE,SACnBuE,EAAMxE,MAAQmE,EAAEnE,MACTwE,CAAK,IAETD,CAAK,IAEhBF,EAAa3D,MAAQZ,KAAKY,MAAM8C,KAAInB,IAChC,MAAMoC,EAAQ,CAAA,EAId,OAHAA,EAAM1E,KAAOsC,EAAEtC,KACf0E,EAAMC,YAAcrC,EAAEV,QAAQ5B,KAC9B0E,EAAME,YAActC,EAAER,QAAQ9B,KACvB0E,CAAK,IAEhBJ,EAAa1D,KAAOb,KAAKa,KAAK6C,KAAInB,IAC9B,MAAMoC,EAAQ,CAAA,EAGd,OAFAA,EAAM1E,KAAOsC,EAAEtC,KACf0E,EAAMG,WAAavC,EAAElC,OAAOJ,KACrB0E,CAAK,IAETI,KAAKC,UAAUT,EACzB,CAED,UAAAU,GACI,MAAMC,EAAYlF,KAAKsE,SACjBa,EAAO,IAAIC,KAAK,CAACF,GAAY,CAACG,KAAM,qBACpCC,EAAMC,IAAIC,gBAAgBL,GAC1BM,EAAIC,SAASC,cAAc,KACjCF,EAAEG,KAAON,EACTG,EAAEI,SAAW,aACbJ,EAAEK,OACL,CAED,cAAAC,CAAeC,GACX5B,QAAQlC,IAAI8D,GACZhG,KAAKwE,OAASwB,EAAUxB,OACxBwB,EAAUrF,MAAMkC,SAAQR,IACpB,MACMb,EAAO,IADKxB,KAAKsD,wBAAwBjB,EAAEkB,WACpC,CAAclB,GAC3Bb,EAAK0B,QAAUb,EAAEa,QAAQQ,KAAIW,GAAK,IAAIxE,EAAOwE,KAC7CD,QAAQlC,IAAIV,GACZxB,KAAKuB,QAAQC,EAAK,IAEtB4C,QAAQlC,IAAI,eACZ8D,EAAUpF,MAAMiC,SAAQN,IACpB6B,QAAQlC,IAAIK,GACZ,MAAMV,EAAU7B,KAAKkE,gBAAgB3B,EAAEqC,aACjC7C,EAAU/B,KAAKkE,gBAAgB3B,EAAEsC,aAEvC,IAAIoB,EADJ7B,QAAQlC,IAAIL,EAASE,GAKjBkE,EAHC1D,EAAEgB,UAGSvD,KAAK6D,wBAAwBtB,EAAEgB,WAF/BvD,KAAK6D,0BAIrBO,QAAQlC,IAAI+D,GACZ7B,QAAQlC,IAAIlC,KAAK8D,sBACjB9D,KAAK0B,QAAQ,IAAIuE,EAAU,CAAChG,KAAKsC,EAAEtC,KAAM4B,UAASE,aAClDqC,QAAQlC,IAAI,aAAa,IAE7BkC,QAAQlC,IAAI,eACZ8D,EAAUnF,KAAKgC,SAAQN,IACnB6B,QAAQlC,IAAIK,GACZ,MAAM2D,EAAalG,KAAKoD,cAAcb,EAAEuC,YAClCqB,EAAanG,KAAKqD,cAAcd,EAAEuC,YACxCV,QAAQlC,IAAIgE,EAAYC,GACxB,MAAM9F,EAAS6F,GAAcC,EAC7B/B,QAAQlC,IAAI7B,GACZL,KAAKiC,OAAO,IAAI7B,EAAI,CAACH,KAAKsC,EAAEtC,KAAMI,WAAS,IAE/C+D,QAAQlC,IAAI,aAIf,CAED,iBAAMkE,CAAYd,GACd,MAAMe,QAAiBC,MAAMhB,GACvBiB,QAAaF,EAASE,OAC5BvG,KAAK+F,eAAeQ,EACvB,EAOL,MAAMC,EACF,WAAA1G,CAAYC,GACRC,KAAKC,KAAOF,EAAQE,MAAQ,OAC5BD,KAAKkD,QAAU,GACflD,KAAKE,MAAQH,EAAQG,OAAS,CAAA,EAC9BF,KAAKyG,YAAc,EACf1G,EAAQmD,SACRnD,EAAQmD,QAAQL,SAAQE,IACpB/C,KAAK0G,UAAU3D,EAAO,GAGjC,CAED,WAAA4D,GACI,IAAIC,EAAc,UAAU5G,KAAKyG,cAEjC,OADAzG,KAAKyG,cACEG,CACV,CAED,eAAIC,GACA,OAAO7G,KAAKkD,QAAQd,QAAOiC,GAAoB,SAAfA,EAAElE,UACrC,CAED,gBAAI2G,GACA,OAAO9G,KAAKkD,QAAQd,QAAOiC,GAAoB,UAAfA,EAAElE,UACrC,CAED,cAAI4G,GACA,OAAO/G,KAAKkD,QAAQd,QAAOiC,GAAoB,QAAfA,EAAElE,UACrC,CAED,iBAAI6G,GACA,OAAOhH,KAAKkD,QAAQd,QAAOiC,GAAoB,WAAfA,EAAElE,UACrC,CAED,SAAAuG,CAAU3D,GACNA,EAAOtB,GAAKzB,KAAK2G,cACjB3G,KAAKkD,QAAQ1C,KAAKuC,EACrB,CAED,gBAAAkE,CAAiBxD,EAAOV,GACpBA,EAAOtB,GAAKzB,KAAK2G,cACjB3G,KAAKkD,QAAQO,GAASV,CACzB,CAED,gBAAAmE,CAAiBzD,GACb,OAAOzD,KAAKkD,QAAQO,EACvB,CAED,eAAAS,CAAgBjE,GACZ,OAAOD,KAAKkD,QAAQF,MAAKqB,GAAKA,EAAEpE,OAASA,GAC5C,CAED,YAAAkH,CAAapE,GACT/C,KAAKkD,QAAUlD,KAAKkD,QAAQd,QAAOiC,GAAKA,IAAMtB,GACjD,CAED,gBAAAqE,CAAiB3F,GACbzB,KAAKkD,QAAUlD,KAAKkD,QAAQd,QAAOiC,GAAKA,EAAE5C,KAAOA,GACpD,CAED,mBAAA4F,CAAoB5D,GAChBzD,KAAKkD,QAAUlD,KAAKkD,QAAQd,QAAO,CAACiC,EAAGiD,IAAMA,IAAM7D,GACtD,EAIL,MAAM8D,EACF,WAAAzH,CAAYC,GACRA,EAAUA,GAAW,GACrBC,KAAKC,KAAOF,EAAQE,MAAQ,OAC5BD,KAAK6B,QAAU9B,EAAQ8B,SAAW,KAClC7B,KAAK+B,QAAUhC,EAAQgC,SAAW,KAClC/B,KAAKE,MAAQH,EAAQG,OAAS,CAAA,CACjC,CAED,cAAAsH,CAAezE,GACX,OAAIA,IAAW/C,KAAK6B,QACT7B,KAAK+B,QACLgB,IAAW/C,KAAK+B,QAChB/B,KAAK6B,QAEL,IAEd,ECtVL,MAAM4F,UAAmBjB,EACrB,WAAA1G,CAAYC,GAER2H,MADA3H,EAAUA,GAAW,GAExB,CAED,cAAA4H,GAEC,CAED,WAAAC,GAEC,ECXL,MAAMC,UAAuBJ,EACzB,WAAA3H,CAAYC,GAER2H,MADA3H,EAAUA,GAAW,IAErBC,KAAKuD,UAAY,iBACjBvD,KAAKqF,KAAO,UACZ,MAAMyC,EAAgB,CAAA,EACtBA,EAAc7H,KAAOF,EAAQoE,YAAc,cAC3C2D,EAAc3H,SAAWJ,EAAQI,UAAY,OAC7C2H,EAAc5H,MAAQH,EAAQgI,aAAe,CAACC,IAAKC,IAAUC,MAAM,KAAMC,UAAW,YACpFnI,KAAKiH,iBAAiB,EAAG,IAAIpH,EAAOiI,GACvC,ECXL,MAAMM,UAAuBX,EACzB,WAAA3H,CAAYC,GAER2H,MADA3H,EAAUA,GAAW,IAErBC,KAAKuD,UAAY,iBACjBvD,KAAKqF,KAAO,UACZ,MAAMyC,EAAgB,CAAA,EACtBA,EAAc7H,KAAOF,EAAQoE,YAAc,cAC3C2D,EAAc3H,SAAWJ,EAAQI,UAAY,QAC7C2H,EAAc5H,MAAQH,EAAQgI,aAAe,CAACC,IAAKC,IAAUC,MAAM,KAAMC,UAAW,YACpFnI,KAAKiH,iBAAiB,EAAG,IAAIpH,EAAOiI,GACvC,ECXL,MAAMO,UAAiBZ,EACnB,WAAA3H,CAAYC,GAER2H,MADA3H,EAAUA,GAAW,IAErBC,KAAKuD,UAAY,WACjBvD,KAAKqF,KAAO,UACZ,MAAMyC,EAAgB,CAAA,EACtBA,EAAc7H,KAAOF,EAAQoE,YAAc,OAC3C2D,EAAc3H,SAAWJ,EAAQI,UAAY,OAC7C2H,EAAc5H,MAAQH,EAAQgI,aAAe,CAACC,IAAK,KAAME,MAAM,KAAMC,UAAW,aAAcG,aAAa,EAAOC,WAAY,MAC9HvI,KAAKiH,iBAAiB,EAAG,IAAIpH,EAAOiI,GACvC,CAED,cAAAH,GACI,MAAMzH,EAAQF,KAAKkH,iBAAiB,GAAGhH,MACf,eAApBA,EAAMiI,WAGNjI,EAAMoI,cACNpI,EAAMgI,MAAQhI,EAAMqI,WAAWvI,KAAKwI,UAE3C,ECrBL,MAAMC,UAAoBhB,EACtB,WAAA3H,CAAYC,GAER2H,MADA3H,EAAUA,GAAW,IAErBC,KAAKuD,UAAY,cACjBvD,KAAKqF,KAAO,UACZ,MAAMyC,EAAgB,CAAA,EACtBA,EAAc7H,KAAOF,EAAQoE,YAAc,WAC3C2D,EAAc3H,SAAWJ,EAAQI,UAAY,QAC7C2H,EAAc5H,MAAQH,EAAQgI,aAAe,CAACC,IAAK,KAAME,MAAM,KAAMC,UAAW,aAAcG,aAAa,EAAOC,WAAY,MAC9HvI,KAAKiH,iBAAiB,EAAG,IAAIpH,EAAOiI,GACvC,CAED,cAAAH,GACI,MAAMzH,EAAQF,KAAKkH,iBAAiB,GAAGhH,MACd,gBAApBA,EAAMiI,WAGPjI,EAAMoI,cACNpI,EAAMgI,MAAQhI,EAAMqI,WAAWvI,KAAKwI,UAE3C,ECtBL,MAAME,UAAuBjB,EACzB,WAAA3H,CAAYC,GAER2H,MADA3H,EAAUA,GAAW,IAErBC,KAAK2I,MAAQ,iBACb3I,KAAKqF,KAAO,gBACf,CAED,cAAAuD,GACI,MAAMC,EAAmB7I,KAAKE,MAAM2I,iBAC9BC,EAAoB9I,KAAKE,MAAM4I,kBAC/BC,EAAyBF,EAAiBnF,KAAIS,GAAcnE,KAAKkE,gBAAgBC,KACjF6E,EAA0BF,EAAkBpF,KAAIS,GAAcnE,KAAKkE,gBAAgBC,KACnF8E,EAAwBF,EAAuBrF,KAAKW,GAAKA,EAAEvC,cAC3DoH,EAAyBF,EAAwBtF,KAAKW,GAAKA,EAAEvC,cAEnE,IAAIqH,EAAaF,EAAsB7G,QAAQiC,GAA0B,cAArBA,EAAEnE,MAAMiI,YAA2BiB,QAAO,CAACC,EAAKhF,IAAMgF,EAAMhF,EAAEnE,MAAMgI,OAAO,GAC3HoB,EAAcJ,EAAuB9G,QAAQiC,GAA0B,cAArBA,EAAEnE,MAAMiI,YAA2BiB,QAAO,CAACC,EAAKhF,IAAMgF,EAAMhF,EAAEnE,MAAMgI,OAAO,GAE7HiB,GAAcG,GACdJ,EAAuBrG,SAASwB,IAC5B,GAAyB,cAArBA,EAAEnE,MAAMiI,UAA0B,CAClC,MAAMoB,EAAmBlF,EAAEvC,YAC3ByH,EAAiBrJ,MAAMgI,MAAQ,KAC/BqB,EAAiBrJ,MAAMiI,UAAY,WACnCoB,EAAiBrJ,MAAM8H,IAAMC,IAC7BkB,GAAc9E,EAAEnE,MAAMgI,KACzB,KAELgB,EAAuBrG,SAASwB,IAC5B,GAAyB,YAArBA,EAAEnE,MAAMiI,UAAwB,CAChC,MAAMoB,EAAmBlF,EAAEvC,YACrB0H,EAAcC,KAAKC,IAAIP,EAAY9E,EAAEnE,MAAM8H,KACjDuB,EAAiBrJ,MAAMgI,MAAQsB,EAC/BD,EAAiBrJ,MAAMiI,UAAY,SACnCgB,GAAcK,CACjB,KAELP,EAAsBpG,SAASwB,IAC3B,GAAyB,cAArBA,EAAEnE,MAAMiI,UAA0B,CAClC,MAAMoB,EAAmBlF,EAAEvC,YAC3ByH,EAAiBrJ,MAAMgI,MAAQ,KAC/BqB,EAAiBrJ,MAAMiI,UAAY,WACnCoB,EAAiBrJ,MAAM8H,IAAMC,GAChC,CACD,GAAyB,YAArB5D,EAAEnE,MAAMiI,UAAwB,CAChC,MAAMoB,EAAmBlF,EAAEvC,YAC3ByH,EAAiBrJ,MAAMgI,MAAQ,EAC/BqB,EAAiBrJ,MAAMiI,UAAY,QACtC,OAGLc,EAAsBpG,SAASwB,IAC3B,GAAyB,cAArBA,EAAEnE,MAAMiI,UAA0B,CAClC,MAAMoB,EAAmBlF,EAAEvC,YAC3ByH,EAAiBrJ,MAAMgI,MAAQ,KAC/BqB,EAAiBrJ,MAAMiI,UAAY,WACnCoB,EAAiBrJ,MAAM8H,IAAMC,IAC7BqB,GAAejF,EAAEnE,MAAMgI,KAC1B,KAELe,EAAsBpG,SAASwB,IAC3B,GAAyB,YAArBA,EAAEnE,MAAMiI,UAAwB,CAChC,MAAMoB,EAAmBlF,EAAEvC,YACrB0H,EAAcC,KAAKC,IAAIJ,EAAajF,EAAEnE,MAAM8H,KAClDuB,EAAiBrJ,MAAMgI,MAAQsB,EAC/BD,EAAiBrJ,MAAMiI,UAAY,SACnCmB,GAAeE,CAClB,KAELN,EAAuBrG,SAASwB,IAC5B,GAAyB,cAArBA,EAAEnE,MAAMiI,UAA0B,CAClC,MAAMoB,EAAmBlF,EAAEvC,YAC3ByH,EAAiBrJ,MAAMgI,MAAQ,KAC/BqB,EAAiBrJ,MAAMiI,UAAY,WACnCoB,EAAiBrJ,MAAM8H,IAAMC,GAChC,CACD,GAAyB,YAArB5D,EAAEnE,MAAMiI,UAAwB,CAChC,MAAMoB,EAAmBlF,EAAEvC,YAC3ByH,EAAiBrJ,MAAMgI,MAAQ,EAC/BqB,EAAiBrJ,MAAMiI,UAAY,QACtC,KAGZ,ECnFL,MAAMwB,UAA2BlC,EAC7B,WAAA3H,CAAYC,IACRA,EAAUA,GAAW,IACbG,MAAQH,EAAQG,OAAS,CAAA,EACjCH,EAAQG,MAAM0J,UAAY7J,EAAQG,MAAM0J,WAAa,IACrD7J,EAAQG,MAAM2J,aAAe9J,EAAQG,MAAM2J,cAAgB,IAC3D,MAEMC,EAAiB,CAFI,IAAIjK,EAAO,CAACI,KAAM,QAASE,SAAU,OAAQD,MAAO,CAAC8H,IAAKjI,EAAQG,MAAM0J,UAAW1B,MAAM,KAAMC,UAAW,cACzG,IAAItI,EAAO,CAACI,KAAM,SAAUE,SAAU,QAASD,MAAO,CAAC8H,IAAMjI,EAAQG,MAAM2J,aAAc3B,MAAM,KAAMC,UAAW,eAE5IpI,EAAQmD,QAAUnD,EAAQmD,SAAW4G,EACrC/J,EAAQG,MAAM6J,SAAWhK,EAAQG,MAAM6J,UAAY,EACnDrC,MAAM3H,GACNC,KAAKE,MAAM8J,OAAS,EACpBhK,KAAKuD,UAAY,qBACjBvD,KAAKqF,KAAO,aACf,CAED,WAAAuC,GACI,MAAMqC,EAAS,KACTC,EAAelK,KAAK6G,YACpBsD,EAAgBnK,KAAK8G,aACrBsD,EAAaF,EAAaxG,KAAKW,GAAKA,EAAE1C,OACtC0I,EAAcF,EAAczG,KAAKW,GAAKA,EAAE1C,OACxC2I,EAAcF,EAAW1G,KAAKnB,GAAKA,EAAErC,MAAMgI,QAC3CqC,EAAeF,EAAY3G,KAAKnB,GAAKA,EAAErC,MAAMgI,QAG7CsC,EAFiBF,EAAYlB,QAAQ,CAAC3D,EAAEgF,IAAMhF,EAAEgF,GAAG,GACjCF,EAAanB,QAAQ,CAAC3D,EAAEgF,IAAMhF,EAAEgF,GAAG,GAErDC,EAAoB1K,KAAKE,MAAM6J,SAAW/J,KAAKE,MAAM8J,OACrDW,EAAelB,KAAKC,IAAIc,EAAUxK,KAAK4K,aAAaX,EAAQS,GAClE1K,KAAKE,MAAM8J,QAAUW,EACrB,IAAId,EAAeJ,KAAKC,IAAI1J,KAAKE,MAAM2J,aAAc7J,KAAKE,MAAM8J,OAAOC,GACvEJ,EAAeJ,KAAKzB,IAAI6B,EAAc,GACtC,MAAMD,EAAYH,KAAKC,IAAI1J,KAAKE,MAAM0J,WAAY5J,KAAKE,MAAM6J,SAAW/J,KAAKE,MAAM8J,QAAQC,GAC3FjK,KAAKkH,iBAAiB,GAAGhH,MAAM8H,IAAM4B,EACrC5J,KAAKkH,iBAAiB,GAAGhH,MAAM8H,IAAM6B,CACxC,ECrCL,MAAMgB,UAAmBtD,EACrB,WAAAzH,CAAYC,GACR2H,MAAM3H,EACT,CAED,OAAA+K,GACI,MACMC,EADU/K,KAAK6B,QACE3B,MAEjB8K,EADUhL,KAAK+B,QACE7B,MAInB6K,EAAO5C,WAAa6C,EAAO7C,WAC3B/D,QAAQlC,IAAI,+DAAgElC,MAGxD,YAApBgL,EAAO7C,WAAgD,cAApB4C,EAAO5C,WAAiD,UAApB4C,EAAO5C,YAC1E4C,EAAO7C,OAAS8C,EAAOhD,IACvBhI,KAAKE,MAAMgI,MAAQ6C,EAAO7C,MAE1B9D,QAAQlC,IAAI,kDAAmDlC,OAI/C,YAApB+K,EAAO5C,WAAgD,cAApB6C,EAAO7C,WAAiD,UAApB6C,EAAO7C,YAC1E6C,EAAO9C,OAAS6C,EAAO/C,IACvBhI,KAAKE,MAAMgI,MAAQ8C,EAAO9C,MAE1B9D,QAAQlC,IAAI,kDAAmDlC,MAI1E,+HC1BL,cAA0BU,EACtB,WAAAZ,CAAYC,GAER2H,MADA3H,EAAUA,GAAW,IAErB,MAAMkL,EAAgBlL,EAAQyE,QAAU,GAClCA,EAAS,CAAE,EACjBA,EAAO8D,YAAc2C,EAAc3C,cAAe,EAClD9D,EAAO0G,UAAYD,EAAcC,WAAa,EAC9C1G,EAAOoG,aAAeK,EAAcL,cAAgB,EACpD5K,KAAKwE,OAASA,EACdxE,KAAKwI,SAAW,CACnB,CAED,wBAAIhF,GACA,MAAO,CAACmG,EAAoBjB,EAAgBb,EAAgBO,EAAgBC,EAAUI,EACzF,CAED,wBAAI3E,GACA,MAAO,CAAC+G,EACX,CAED,WAAAM,CAAY3C,GACRxI,KAAKwI,SAAWA,EAChBxI,KAAKW,MAAMkC,SAASR,GAAKA,EAAEmG,SAAWA,GACzC,CAED,eAAA4C,CAAgBR,GACZ5K,KAAKwE,OAAOoG,aAAeA,EAC3B5K,KAAKW,MAAMkC,SAASR,GAAKA,EAAEuI,aAAeA,GAC7C,CAED,GAAAS,GACI,MAAM1K,EAAQX,KAAKW,MACbC,EAAQZ,KAAKY,MACbC,EAAOb,KAAKa,KACZyH,EAActI,KAAKwE,OAAO8D,YAC1B4C,EAAYlL,KAAKwE,OAAO0G,UACxBN,EAAe5K,KAAKwE,OAAOoG,aACjC5K,KAAKoL,gBAAgBR,GAChBtC,IACDtI,KAAKkL,UAAY,GAIrB,IAAK,IAAI5D,EAAI,EAAGA,EAAI4D,EAAW5D,IAC3BtH,KAAKmL,YAAY7D,GAKjB3G,EAAMkC,SAAQrB,GAAQA,EAAKmG,mBAK3BhH,EAAMyB,QAAOZ,GAAsB,mBAAdA,EAAK6D,OAA2BxC,SAAQyI,GAAkBA,EAAe1C,mBAM9FhI,EAAMiC,SAAQlB,GAAQA,EAAKmJ,YAK3BnK,EAAMkC,SAAQrB,GAAQA,EAAKoG,gBAM3B/G,EAAKgC,SAASX,GAAOA,EAAI3B,cAKhC","x_google_ignoreList":[0]}