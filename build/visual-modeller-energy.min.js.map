{"version":3,"file":"visual-modeller-energy.min.js","sources":["../node_modules/visual-modeller-core/build/visual-modeller-core.js","../src/EnergyNode.js","../src/ControllerNode.js","../src/GridExportNode.js","../src/GridSupplyNode.js","../src/LoadNode.js","../src/SolarPVNode.js"],"sourcesContent":["class Model {\n    constructor(options) {\n        this.nodes = options.nodes || [];\n        this.links = options.links || [];\n        this.logs = options.logs || [];\n        this.maxNodeId = 0;\n        this.maxLinkId = 0;\n        this.maxLogId = 0;\n    }\n\n    getNodeId() {\n        let newNodeId = `node-${this.maxNodeId}`;\n        this.maxNodeId++;\n        return newNodeId;\n    }\n\n    getLinkId() {\n        let newLinkId = `link-${this.maxLinkId}`;\n        this.maxLinkId++;\n        return newLinkId;\n    }\n\n    addNode(node) {\n        node.id = this.getNodeId();\n        this.nodes.push(node);\n    }\n\n    addLink(link) {\n        link.id = this.getLinkId();\n        this.links.push(link);\n    }\n\n    addLog(log) {\n        log.id = this.getLogId();\n        this.logs.push(log);\n    }\n\n    removeNode(node) {\n        this.nodes = this.nodes.filter(n => n !== node);\n    }\n\n    removeLink(link) {\n        this.links = this.links.filter(l => l !== link);\n    }\n\n    removeLog(log) {\n        this.logs = this.logs.filter(l => l !== log);\n    }\n\n    removeNodeById(id) {\n        this.nodes = this.nodes.filter(n => n.id !== id);\n    }\n\n    removeLinkById(id) {\n        this.links = this.links.filter(l => l.id !== id);\n    }\n\n    removeLogById(id) {\n        this.logs = this.logs.filter(l => l.id !== id);\n    }\n}\n\nclass Node {\n    constructor(options) {\n        this.name = options.name || 'node';\n        this.sockets = [];\n        this.state = options.state || {};\n        this.maxSocketId = 0;\n        if (options.sockets) {\n            options.sockets.forEach(socket => {\n                this.addSocket(socket);\n            });\n        }\n    }\n\n    getSocketId() {\n        let newSocketId = this.maxSocketId;\n        this.maxSocketId++;\n        return newSocketId;\n    }\n\n    get leftSockets() {\n        return this.sockets.filter(s => s.position === 'left');\n    }\n\n    get rightSockets() {\n        return this.sockets.filter(s => s.position === 'right');\n    }\n\n    get topSockets() {\n        return this.sockets.filter(s => s.position === 'top');\n    }\n\n    get bottomSockets() {\n        return this.sockets.filter(s => s.position === 'bottom');\n    }\n    \n    addSocket(socket) {\n        socket.id = this.getSocketId();\n        this.sockets.push(socket);\n    }\n\n    setSocketByIndex(index, socket) {\n        socket.id = this.getSocketId();\n        this.sockets[index] = socket;\n    }\n\n    getSocketByIndex(index) {\n        return this.sockets[index];\n    }   \n\n    removeSocket(socket) {\n        this.sockets = this.sockets.filter(s => s !== socket);\n    }\n\n    removeSocketById(id) {\n        this.sockets = this.sockets.filter(s => s.id !== id);\n    }\n\n    removeSocketByIndex(index) {\n        this.sockets = this.sockets.filter((s, i) => i !== index);\n    }\n\n}\n\nclass Socket {\n    constructor(options) {\n        this.name = options.name || 'socket';\n        this.state = options.state || {};\n        this.linkId = options.linkId || '';\n        this.position = options.position || 'left';  \n    }\n}\n\nclass Link {\n    constructor(options) {\n        this.socket1 = options.socket1 || null;\n        this.socket2 = options.socket2 || null;\n        this.state = options.state || {};\n    }\n}\n\nclass Log {\n    constructor(options) {\n        this.name = options.name || 'log';\n        this.target = options.target || null;\n        this.values = [];\n    }\n\n    addToLog() {\n        this.values.push(this.target);\n    }\n}\n\nexport { Link, Log, Model, Node, Socket };\n","import { Node } from 'visual-modeller-core';\n\nclass EnergyNode extends Node {\n    constructor(options) {\n        super(options);\n    }\n\n    setConstraints(){\n        return;\n    }\n    \n    updateState(){\n        return;\n    }\n}\n\n\nexport { EnergyNode };","import { EnergyNode } from \"./EnergyNode\";\n\nclass ControllerNode extends EnergyNode {\n    constructor(options) {\n        super(options);\n        this.class = 'controlNode';\n        this.type = 'controller';\n        this.inputSocketOrder = options.inputSocketOrder || [];\n        this.outputSocketOrder = options.outputSocketOrder || [];\n    }\n\n}\n\nexport { ControllerNode };","import { EnergyNode } from \"./EnergyNode\";\nimport { Socket } from 'visual-modeller-core';\n\nclass GridExportNode extends EnergyNode {\n    constructor(options) {\n        super(options);\n        this.class = 'endNode';\n        this.type = 'gridExport';\n        const socketOptions = {};\n        socketOptions.name = options.name || 'Grid Export';\n        socketOptions.linkId = options.linkId || '';\n        socketOptions.position = options.position || 'left';\n        socketOptions.state = options.state || {max: Infinity, value:null, constraint: false};\n        this.addSocketByIndex(0, new Socket(socketOptions));\n    }\n}\n\nexport { GridExportNode };","import { EnergyNode } from \"./EnergyNode\";\nimport { Socket } from 'visual-modeller-core';\n\nclass GridSupplyNode extends EnergyNode {\n    constructor(options) {\n        super(options);\n        this.class = 'endNode';\n        this.type = 'gridSupply';\n        const socketOptions = {};\n        socketOptions.name = options.name || 'Grid Supply';\n        socketOptions.linkId = options.linkId || '';\n        socketOptions.position = options.position || 'right'; // output on right side\n        socketOptions.state = options.state || {max: Infinity, value:null, constraint: false};\n        this.addSocketByIndex(0, new Socket(socketOptions)); // endNode so only one socket\n    }\n}\n\nexport { GridSupplyNode };","import { EnergyNode } from \"./EnergyNode\";\nimport { Socket } from 'visual-modeller-core';\n\nclass LoadNode extends EnergyNode {\n    constructor(options) {\n        super(options);\n        this.class = 'endNode';\n        this.type = 'loadNode';\n        const socketOptions = {};\n        socketOptions.name = options.name || 'Load';\n        socketOptions.linkId = options.linkId || '';\n        socketOptions.position = options.position || 'left'; // input on left side\n        socketOptions.state = options.state || {max: null, value:null, constraint: true, timeVarying: false, timeSeries: null};\n        this.addSocketByIndex(0, new Socket(socketOptions)); // endNode so only one socket\n    }\n\n    setConstraints(data) {\n        const timeStep = data.timeStep;\n        const state = this.getSocketByIndex(0).state;\n        if (!state.constraint) {\n            return;\n        }\n        if (state.timeVarying) {\n            state.value = state.timeSeries[timeStep];\n        } \n    }\n    \n}\n\nexport { LoadNode };","import { EnergyNode } from \"./EnergyNode\";\nimport { Socket } from 'visual-modeller-core';\n\nclass SolarPVNode extends EnergyNode {\n    constructor(options) {\n        super(options);\n        this.class = 'endNode';\n        this.type = 'solarPVNode';\n        const socketOptions = {};\n        socketOptions.name = options.name || 'Solar PV';\n        socketOptions.linkId = options.linkId || '';\n        socketOptions.position = options.position || 'right'; // output on right side\n        socketOptions.state = options.state || {max: null, value:null, constraint: true, timeVarying: false, timeSeries: null};\n        this.addSocketByIndex(0, new Socket(socketOptions)); // endNode so only one socket\n    }\n\n    setConstraints(data) {\n        const timeStep = data.timeStep;\n        const state = this.getSocketByIndex(0).state;\n        if (!state.constraint) {\n            return;\n        }\n        if (state.timeVarying) {\n            state.value = state.timeSeries[timeStep];\n        } \n    }\n    \n}\n\nexport { SolarPVNode };"],"names":["Node","constructor","options","this","name","sockets","state","maxSocketId","forEach","socket","addSocket","getSocketId","newSocketId","leftSockets","filter","s","position","rightSockets","topSockets","bottomSockets","id","push","setSocketByIndex","index","getSocketByIndex","removeSocket","removeSocketById","removeSocketByIndex","i","Socket","linkId","EnergyNode","super","setConstraints","updateState","class","type","inputSocketOrder","outputSocketOrder","socketOptions","max","Infinity","value","constraint","addSocketByIndex","timeVarying","timeSeries","data","timeStep"],"mappings":"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","x_google_ignoreList":[0]}