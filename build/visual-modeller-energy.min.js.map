{"version":3,"file":"visual-modeller-energy.min.js","sources":["../node_modules/visual-modeller-core/build/visual-modeller-core.js","../src/EnergyNode.js","../src/BatteryStorageNode.js","../src/ControllerNode.js","../src/GridExportNode.js","../src/GridSupplyNode.js","../src/EnergyLink.js","../src/LoadNode.js","../src/EnergyModel.js","../src/SolarPVNode.js"],"sourcesContent":["class Model {\n    constructor(options) {\n        this.nodes = options.nodes || [];\n        this.links = options.links || [];\n        this.logs = options.logs || [];\n        this.maxNodeId = 0;\n        this.maxLinkId = 0;\n        this.maxLogId = 0;\n    }\n\n    getNodeId() {\n        let newNodeId = `node-${this.maxNodeId}`;\n        this.maxNodeId++;\n        return newNodeId;\n    }\n\n    getLinkId() {\n        let newLinkId = `link-${this.maxLinkId}`;\n        this.maxLinkId++;\n        return newLinkId;\n    }\n\n    getLogId() {\n        let newLogId = `log-${this.maxLogId}`;\n        this.maxLogId++;\n        return newLogId;\n    }\n\n    addNode(node) {\n        node.id = this.getNodeId();\n        this.nodes.push(node);\n    }\n\n    addLink(link) {\n        link.id = this.getLinkId();\n        const s1 = link.socket1;\n        s1.link = link;\n        s1.otherSocket = link.socket2;\n        const s2 = link.socket2;\n        s2.link = link;\n        s2.otherSocket = link.socket1;\n        this.links.push(link);\n    }\n\n    addLog(log) {\n        log.id = this.getLogId();\n        this.logs.push(log);\n    }\n\n    removeNode(node) {\n        this.nodes = this.nodes.filter(n => n !== node);\n    }\n\n    removeLink(link) {\n        this.links = this.links.filter(l => l !== link);\n    }\n\n    removeLog(log) {\n        this.logs = this.logs.filter(l => l !== log);\n    }\n\n    removeNodeById(id) {\n        this.nodes = this.nodes.filter(n => n.id !== id);\n    }\n\n    removeLinkById(id) {\n        this.links = this.links.filter(l => l.id !== id);\n    }\n\n    removeLogById(id) {\n        this.logs = this.logs.filter(l => l.id !== id);\n    }\n\n    clearLogs() {\n        this.logs.forEach(l => l.clear());\n    }\n\n    getLinkBySocket(socket) {\n        return this.links.find(l => l.socket1 === socket || l.socket2 === socket);\n    }\n\n    getNodeBySocket(socket) {\n        return this.nodes.find(n => n.sockets.includes(socket));\n    }\n}\n\nclass Node {\n    constructor(options) {\n        this.name = options.name || 'node';\n        this.sockets = [];\n        this.state = options.state || {};\n        this.maxSocketId = 0;\n        if (options.sockets) {\n            options.sockets.forEach(socket => {\n                this.addSocket(socket);\n            });\n        }\n    }\n\n    getSocketId() {\n        let newSocketId = `socket-${this.maxSocketId}`;\n        this.maxSocketId++;\n        return newSocketId;\n    }\n\n    get leftSockets() {\n        return this.sockets.filter(s => s.position === 'left');\n    }\n\n    get rightSockets() {\n        return this.sockets.filter(s => s.position === 'right');\n    }\n\n    get topSockets() {\n        return this.sockets.filter(s => s.position === 'top');\n    }\n\n    get bottomSockets() {\n        return this.sockets.filter(s => s.position === 'bottom');\n    }\n    \n    addSocket(socket) {\n        socket.id = this.getSocketId();\n        this.sockets.push(socket);\n    }\n\n    setSocketByIndex(index, socket) {\n        socket.id = this.getSocketId();\n        this.sockets[index] = socket;\n    }\n\n    getSocketByIndex(index) {\n        return this.sockets[index];\n    }\n    \n    getSocketByName(name) {\n        return this.sockets.find(s => s.name === name);\n    }\n\n    removeSocket(socket) {\n        this.sockets = this.sockets.filter(s => s !== socket);\n    }\n\n    removeSocketById(id) {\n        this.sockets = this.sockets.filter(s => s.id !== id);\n    }\n\n    removeSocketByIndex(index) {\n        this.sockets = this.sockets.filter((s, i) => i !== index);\n    }\n\n}\n\nclass Socket {\n    constructor(options) {\n        this.name = options.name || 'socket';\n        this.state = options.state || {};\n        this.position = options.position || 'left';  \n    }\n}\n\nclass Link {\n    constructor(options) {\n        this.socket1 = options.socket1 || null;\n        this.socket2 = options.socket2 || null;\n        this.state = options.state || {};\n    }\n\n    getOtherSocket(socket) {\n        if (socket === this.socket1) {\n            return this.socket2;\n        } else if (socket === this.socket2) {\n            return this.socket1;\n        } else {\n            return null;\n        }\n    }\n}\n\nclass Log {\n    constructor(options) {\n        this.name = options.name || 'log';\n        this.target = options.target || null;\n        this.states = [];\n    }\n\n    writeToLog() {\n        this.states.push({...this.target.state});\n    }\n\n    clear() {\n        this.states = [];\n    }\n}\n\nexport { Link, Log, Model, Node, Socket };\n","import { Node } from 'visual-modeller-core';\n\nclass EnergyNode extends Node {\n    constructor(options) {\n        options = options || {};\n        super(options);\n    }\n\n    setConstraints(){\n        return;\n    }\n    \n    updateState(){\n        return;\n    }\n}\n\n\nexport { EnergyNode };","import { EnergyNode } from \"./EnergyNode\";\nimport { Socket } from 'visual-modeller-core';\n\nclass BatteryStorageNode extends EnergyNode {\n    constructor(options) {\n        options = options || {};\n        const maxCharge = options.maxCharge || 3000;\n        const maxDischarge = options.maxDischarge || 3000;\n        const defaultInputSocket = new Socket({name: 'Input', position: 'left', state: {max: maxCharge , value:null, valueType: \"variable\"}});\n        const defaultOutputSocket = new Socket({name: 'Output', position: 'right', state: {max:  0, value:null, valueType: \"variable\"}});\n        const defaultSockets = [defaultInputSocket, defaultOutputSocket];\n        options.sockets = options.sockets || defaultSockets;\n        super(options);\n        this.state.charge = 0;\n        this.maxCharge = maxCharge;\n        this.maxDischarge = maxDischarge;\n        this.capacity = options.capacity || 5;\n        this.class = 'storageNode';\n        this.type = 'batteryStorage';\n        \n    }\n\n    updateState() {\n        const JinkWh = 1000*60*60;\n        const inputSockets = this.leftSockets;\n        const outputSockets = this.rightSockets;\n        const inputLinks = inputSockets.map( s => s.link );\n        const outputLinks = outputSockets.map( s => s.link );\n        const inputFluxes = inputLinks.map( l => l.state.value);\n        const outputFluxes = outputLinks.map( l => l.state.value);\n        const totalInputFlux = inputFluxes.reduce( (a,b) => a+b, 0);\n        const totalOutputFlux = outputFluxes.reduce( (a,b) => a+b, 0);\n        const netFluxIn = totalInputFlux - totalOutputFlux; // in W\n        const remainingCapacity = this.capacity - this.state.charge; // in kWh\n        const chargeChange = Math.min(netFluxIn*this.timeStepSize/JinkWh, remainingCapacity);\n        this.state.charge += chargeChange;\n        let maxDischarge = Math.min(this.maxDischarge, this.state.charge*JinkWh);\n        maxDischarge = Math.max(maxDischarge, 0);\n        const maxCharge = Math.min(this.maxCharge, (this.capacity - this.state.charge)*JinkWh);\n        this.getSocketByIndex(0).state.max = maxCharge;\n        this.getSocketByIndex(1).state.max = maxDischarge;\n    }\n\n}\n\nexport { BatteryStorageNode };","import { EnergyNode } from \"./EnergyNode\";\n\nclass ControllerNode extends EnergyNode {\n    constructor(options) {\n        options = options || {};\n        super(options);\n        this.class = 'controlNode';\n        this.type = 'controller';\n        this.inputSocketOrder = options.inputSocketOrder || []; // array of socket names\n        this.outputSocketOrder = options.outputSocketOrder || [];\n    }\n\n    setFluxTargets(){\n        const controllerInputSockets = this.inputSocketOrder.map(socketName => this.getSocketByName(socketName));\n        const controllerOutputSockets = this.outputSocketOrder.map(socketName => this.getSocketByName(socketName));\n        const inputConnectedSockets = controllerInputSockets.map( s => s.otherSocket);\n        const outputConnectedSockets = controllerOutputSockets.map( s => s.otherSocket);\n       \n        let totalInput = inputConnectedSockets.filter( s => s.state.valueType == \"constraint\").reduce((acc, s) => acc + s.state.value, 0);\n        let totalOutput = outputConnectedSockets.filter( s => s.state.valueType == \"constraint\").reduce((acc, s) => acc + s.state.value, 0);\n        \n        if (totalInput >= totalOutput){ // more supply than demand\n            outputConnectedSockets.forEach( s => {\n                if (s.state.valueType == \"constraint\"){\n                    const controllerSocket = s.otherSocket;\n                    controllerSocket.state.value = null;\n                    controllerSocket.state.valueType = \"variable\";\n                    controllerSocket.state.max = Infinity;\n                    totalInput -= s.state.value;\n                }\n            });\n            outputConnectedSockets.forEach( s => {\n                if (s.state.valueType == \"variable\"){\n                    const controllerSocket = s.otherSocket;\n                    const targetValue = Math.min(totalInput, s.state.max);\n                    controllerSocket.state.value = targetValue;\n                    controllerSocket.state.valueType = \"target\";\n                    totalInput -= targetValue;\n                }\n            });\n            inputConnectedSockets.forEach( s => {\n                if (s.state.valueType == \"constraint\"){\n                    const controllerSocket = s.otherSocket;\n                    controllerSocket.state.value = null;\n                    controllerSocket.state.valueType = \"variable\";\n                    controllerSocket.state.max = Infinity;\n                }\n                if (s.state.valueType == \"variable\"){\n                    const controllerSocket = s.otherSocket;\n                    controllerSocket.state.value = 0.;\n                    controllerSocket.state.valueType = \"target\";\n                }\n            });\n        } else { // more demand than supply\n            inputConnectedSockets.forEach( s => {\n                if (s.state.valueType == \"constraint\"){\n                    const controllerSocket = s.otherSocket;\n                    controllerSocket.state.value = null;\n                    controllerSocket.state.valueType = \"variable\";\n                    controllerSocket.state.max = Infinity;\n                    totalOutput -= s.state.value;\n                }\n            });\n            inputConnectedSockets.forEach( s => {\n                if (s.state.valueType == \"variable\"){\n                    const controllerSocket = s.otherSocket;\n                    const targetValue = Math.min(totalOutput, s.state.max);\n                    controllerSocket.state.value = targetValue;\n                    controllerSocket.state.valueType = \"target\";\n                    totalOutput -= targetValue;\n                }\n            });\n            outputConnectedSockets.forEach( s => {\n                if (s.state.valueType == \"constraint\"){\n                    const controllerSocket = s.otherSocket;\n                    controllerSocket.state.value = null;\n                    controllerSocket.state.valueType = \"variable\";\n                    controllerSocket.state.max = Infinity;\n                }\n                if (s.state.valueType == \"variable\"){\n                    const controllerSocket = s.otherSocket;\n                    controllerSocket.state.value = 0.;\n                    controllerSocket.state.valueType = \"target\";\n                }\n            });\n        }\n    }\n\n}\n\n\n\nexport { ControllerNode };","import { EnergyNode } from \"./EnergyNode\";\nimport { Socket } from 'visual-modeller-core';\n\nclass GridExportNode extends EnergyNode {\n    constructor(options) {\n        options = options || {};\n        super(options);\n        this.class = 'endNode';\n        this.type = 'gridExport';\n        const socketOptions = {};\n        socketOptions.name = options.socketName || 'Grid Export';\n        socketOptions.position = options.position || 'left';\n        socketOptions.state = options.socketState || {max: Infinity, value:null, valueType: \"variable\"};\n        this.setSocketByIndex(0, new Socket(socketOptions));\n    }\n}\n\nexport { GridExportNode };","import { EnergyNode } from \"./EnergyNode\";\nimport { Socket } from 'visual-modeller-core';\n\nclass GridSupplyNode extends EnergyNode {\n    constructor(options) {\n        options = options || {};\n        super(options);\n        this.class = 'endNode';\n        this.type = 'gridSupply';\n        const socketOptions = {};\n        socketOptions.name = options.socketName || 'Grid Supply';\n        socketOptions.position = options.position || 'right'; // output on right side\n        socketOptions.state = options.socketState || {max: Infinity, value:null, valueType: \"variable\"};\n        this.setSocketByIndex(0, new Socket(socketOptions)); // endNode so only one socket\n    }\n}\n\nexport { GridSupplyNode };","import { Link } from 'visual-modeller-core';\n\nclass EnergyLink extends Link {\n    constructor(options) {\n        super(options);\n    }\n\n    setFlux() {\n        const socket1 = this.socket1;\n        const state1 = socket1.state;\n        const socket2 = this.socket2;\n        const state2 = socket2.state;\n\n        //console.log(socket1, socket2);\n\n        if (state1.valueType == state2.valueType) {\n            console.log(\"warning - both sockets for this link have the same valueType\", this);\n        }\n\n        if (state2.valueType == \"variable\" && (state1.valueType == \"constraint\" || state1.valueType == \"target\")) {\n            if (state1.value <= state2.max) {\n                this.state.value = state1.value;\n            } else {\n                console.log(\"problem - variable value exceeds constraint max\", this);\n            }\n        }\n\n        if (state1.valueType == \"variable\" && (state2.valueType == \"constraint\" || state2.valueType == \"target\")) {\n            if (state2.value <= state1.max) {\n                this.state.value = state2.value;\n            } else {\n                console.log(\"problem - variable value exceeds constraint max\", this);\n            }\n        }\n\n    }\n\n}\n\nexport { EnergyLink };","import { EnergyNode } from \"./EnergyNode\";\nimport { Socket } from 'visual-modeller-core';\n\nclass LoadNode extends EnergyNode {\n    constructor(options) {\n        options = options || {};\n        super(options);\n        this.class = 'endNode';\n        this.type = 'loadNode';\n        const socketOptions = {};\n        socketOptions.name = options.socketName || 'Load';\n        socketOptions.position = options.position || 'left'; // input on left side\n        socketOptions.state = options.socketState || {max: null, value:null, valueType: \"constraint\", timeVarying: false, timeSeries: null};\n        this.setSocketByIndex(0, new Socket(socketOptions)); // endNode so only one socket\n    }\n\n    setConstraints() {\n        const state = this.getSocketByIndex(0).state;\n        if (state.valueType !== \"constraint\") {\n            return;\n        }\n        if (state.timeVarying) {\n            state.value = state.timeSeries[this.timeStep];\n        } \n    }\n\n}\n\nexport { LoadNode };","import { Model } from 'visual-modeller-core';\n\nclass EnergyModel extends Model {\n    constructor(options) {\n        super(options);\n        this.timeVarying = options.timeVarying || false;\n        this.timeSteps = options.timeSteps || 1;\n        this.timeStepSize = options.timeStepSize || 1.0;\n        this.timeStep = 0;\n    }\n\n    setTimeStep(timeStep) {\n        this.timeStep = timeStep;\n        this.nodes.forEach( n => n.timeStep = timeStep);\n    }\n\n    setTimeStepSize(timeStepSize) {\n        this.timeStepSize = timeStepSize;\n        this.nodes.forEach( n => n.timeStepSize = timeStepSize);\n    }\n\n    run() {\n        const nodes = this.nodes;\n        const links = this.links;\n        const logs = this.logs;\n        const timeVarying = this.timeVarying;\n        const timeSteps = this.timeSteps;\n        const timeStepSize = this.timeStepSize;\n        this.setTimeStepSize(timeStepSize);\n        if (!timeVarying) {\n            this.timeSteps = 1;\n        }\n\n        for (let i = 0; i < timeSteps; i++) {\n            this.setTimeStep(i);\n            // solution process:\n            //     allNodes - set fixed fluxes and flux limits - e.g. constrained fluxes\n            //     socket.state.fluxTarget is set\n\n            nodes.forEach(node => node.setConstraints()); // needs to know time step\n\n            //     allControllerNodes - set flux targets on sockets\n\n            nodes.filter(node => node.type === 'controller').forEach(controllerNode => controllerNode.setFluxTargets());\n\n            //     allLinks - set fluxes using targets\n\n            links.forEach(link => link.setFlux());\n\n            //     allNodes - update state given current fluxes (e.g. battery)\n\n            nodes.forEach(node => node.updateState());\n\n            //    finally update logs\n            //    logs is array of objects {\"name\", [values]}\n\n            logs.forEach( log => log.writeToLog());\n            \n        }\n\n    }\n}\n\nexport { EnergyModel };\n\n\n\n","import { EnergyNode } from \"./EnergyNode\";\nimport { Socket } from 'visual-modeller-core';\n\nclass SolarPVNode extends EnergyNode {\n    constructor(options) {\n        options = options || {};\n        super(options);\n        this.class = 'endNode';\n        this.type = 'solarPVNode';\n        const socketOptions = {};\n        socketOptions.name = options.socketName || 'Solar PV';\n        socketOptions.position = options.position || 'right'; // output on right side\n        socketOptions.state = options.socketState || {max: null, value:null, valueType: \"constraint\", timeVarying: false, timeSeries: null};\n        this.setSocketByIndex(0, new Socket(socketOptions)); // endNode so only one socket\n    }\n\n    setConstraints() {\n        const state = this.getSocketByIndex(0).state;\n        if (!state.valueType === \"constraint\") {\n            return;\n        }\n        if (state.timeVarying) {\n            state.value = state.timeSeries[this.timeStep];\n        } \n    }\n\n}\n\nexport { SolarPVNode };"],"names":["Model","constructor","options","this","nodes","links","logs","maxNodeId","maxLinkId","maxLogId","getNodeId","newNodeId","getLinkId","newLinkId","getLogId","newLogId","addNode","node","id","push","addLink","link","s1","socket1","otherSocket","socket2","s2","addLog","log","removeNode","filter","n","removeLink","l","removeLog","removeNodeById","removeLinkById","removeLogById","clearLogs","forEach","clear","getLinkBySocket","socket","find","getNodeBySocket","sockets","includes","Node","name","state","maxSocketId","addSocket","getSocketId","newSocketId","leftSockets","s","position","rightSockets","topSockets","bottomSockets","setSocketByIndex","index","getSocketByIndex","getSocketByName","removeSocket","removeSocketById","removeSocketByIndex","i","Socket","Link","getOtherSocket","EnergyNode","super","setConstraints","updateState","maxCharge","maxDischarge","defaultSockets","max","value","valueType","charge","capacity","class","type","JinkWh","inputSockets","outputSockets","inputLinks","map","outputLinks","inputFluxes","outputFluxes","netFluxIn","reduce","a","b","remainingCapacity","chargeChange","Math","min","timeStepSize","inputSocketOrder","outputSocketOrder","setFluxTargets","controllerInputSockets","socketName","controllerOutputSockets","inputConnectedSockets","outputConnectedSockets","totalInput","acc","totalOutput","controllerSocket","Infinity","targetValue","socketOptions","socketState","setFlux","state1","state2","console","timeVarying","timeSeries","timeStep","target","states","writeToLog","timeSteps","setTimeStep","setTimeStepSize","run","controllerNode"],"mappings":"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","x_google_ignoreList":[0]}